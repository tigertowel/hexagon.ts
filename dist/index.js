(()=>{"use strict";var t={712:(t,s)=>{Object.defineProperty(s,"__esModule",{value:!0}),s.CubeNeighbours=s.Cube=void 0;class e{constructor(t,s,e){this.q=t,this.r=s,this.s=e}static fromAxis(t,s){return new e(t,s,-t-s)}add(t){return new e(this.q+t.q,this.r+t.r,this.s+t.s)}subtract(t){return new e(this.q-t.q,this.r-t.r,this.s-t.s)}scale(t){return new e(this.q*t,this.r*t,this.s*t)}invert(){return new e(-this.q,-this.r,-this.s)}lerp(t,s){return t.subtract(this).scale(s)}getDistanceTo(t){return(Math.abs(this.q-t.q)+Math.abs(this.r-t.r)+Math.abs(this.s-t.s))/2}getLineTo(t){let s=[];const e=this.getDistanceTo(t),r=t.subtract(this);for(let t=1;t<e;t++)s.push(r.scale(t/e).round());return s}getNeighbours(){return s.CubeNeighbours.map((t=>t.add(this)))}getSurrounding(t){let s=[];for(let r=-t;r<=t;r++)for(let i=Math.max(-t,-r-t);i<=Math.min(t,t-r);i++)s.push(this.add(e.fromAxis(r,i)));return s}round(){let t=Math.round(this.q),s=Math.round(this.r),r=Math.round(this.s),i=Math.abs(this.q-t),o=Math.abs(this.r-s),n=Math.abs(this.s-r);return i>o&&i>n?new e(-s-r,s,r):o>n?new e(t,-t-r,r):new e(t,s,-t-s)}toString(){return`${this.q}:${this.r}`}}s.Cube=e,s.CubeNeighbours=[e.fromAxis(1,0),e.fromAxis(1,-1),e.fromAxis(0,-1),e.fromAxis(-1,0),e.fromAxis(-1,1),e.fromAxis(0,1)]},839:(t,s,e)=>{Object.defineProperty(s,"__esModule",{value:!0}),s.FlatLayout=s.PointyLayout=void 0;const r=e(712),i=Math.sqrt(3);class o{constructor(){this.polygonOffset=0}cubeToPoint(t){return[t.q*i+t.r*i/2,1.5*t.r]}pointToCube(t,s){return r.Cube.fromAxis(t*i/3-s/3,s/1.5).round()}getPolygon(){return new Array(6).fill(1).map(((t,s)=>{const e=Math.PI/3*s+this.polygonOffset;return[Math.sin(e),Math.cos(e)]}))}}s.PointyLayout=o,s.FlatLayout=class extends o{constructor(){super(...arguments),this.polygonOffset=Math.PI/6}cubeToPoint(t){return[1.5*t.q,t.q*i/2+t.r*i]}pointToCube(t,s){return r.Cube.fromAxis(t/1.5,s*i/3-t/3).round()}}},85:(t,s)=>{Object.defineProperty(s,"__esModule",{value:!0}),s.View=void 0,s.View=class{constructor(t,s){this.offset={x:0,y:0},this.size={x:50,y:50},this.adapter=t,this.layout=s}setOffset(t){const[s,e]=this.adapter.extract(t);return this.offset={x:s,y:e},this}setSize(t){const[s,e]=this.adapter.extract(t);return this.size={x:s,y:e},this}setAngle(t,s){const e=2*Math.cos(Math.PI/3)*s,r=Math.cos(t)*e;return this.setSize(this.adapter.create(e,r))}cubeToPoint(t){const[s,e]=this.layout.cubeToPoint(t);return this.adapter.create(s*this.size.x+this.offset.x,e*this.size.y+this.offset.y)}pointToCube(t){const[s,e]=this.adapter.extract(t);return this.layout.pointToCube((s-this.offset.x)/this.size.x,(e-this.offset.y)/this.size.y)}getPolygon(){return this.layout.getPolygon().map((([t,s])=>this.adapter.create(t,s)))}}}},s={};function e(r){var i=s[r];if(void 0!==i)return i.exports;var o=s[r]={exports:{}};return t[r](o,o.exports,e),o.exports}e(712),e(839),e(85)})();